{"version":3,"sources":["navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","console","log","className","style","backgroundColor","color","fontWeight","paddingTop","fontSize","letterSpacing","alt","type","placeholder","aria-label","onChange","e","setSearch","target","value","imageData","borderColor","onClick","preventDefault","setSent","sent","App","useState","search","setValue","React","useEffect","item","axios","get","then","res","data","results","marginTop","map","searchItem","src","urls","regular","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qQAuDeA,MArDf,SAAgBC,GAYd,OAXAC,QAAQC,IAAI,OAAQF,GAYlB,6BACE,yBACEG,UAAU,kCACVC,MAAO,CAAEC,gBAAiB,cAE1B,uBACEF,UAAU,eACVC,MAAO,CACLE,MAAO,OACPC,WAAY,MACZC,WAAY,OACZC,SAAU,OACVC,cAAe,UAGjB,yBAAKP,UAAU,aAAaQ,IAAI,KAVlC,SAcA,0BAAMR,UAAU,eACd,2BACEA,UAAU,uBACVS,KAAK,SACLC,YAAY,SACZC,aAAW,SACXC,SAnCY,SAACC,GACrBhB,EAAMiB,UAAUD,EAAEE,OAAOC,OACzBlB,QAAQC,IAAI,eAAgBF,EAAMoB,cAmC5B,4BACEjB,UAAU,uCACVC,MAAO,CAAEE,MAAO,OAAQe,YAAa,OAAQd,WAAY,OACzDe,QApCW,SAACN,GACpBA,EAAEO,iBACFtB,QAAQC,IAAI,aACZF,EAAMwB,SAASxB,EAAMyB,QA8Bf,cC0DKC,MA9Ff,WAAgB,IAAD,EACeC,mBAAS,UADxB,mBACNC,EADM,KACEX,EADF,OAEaU,mBAAS,IAFtB,mBAENR,EAFM,KAECU,EAFD,OAIiBC,IAAMH,UAAS,GAJhC,gCAKqBA,mBAAS,KAL9B,gCAMWA,oBAAS,IANpB,mBAMNF,EANM,KAMAD,EANA,KAkEb,OA1DAO,qBACE,SAACC,GAICC,IACGC,IADH,8GAE2GN,IAGxGO,MAAK,SAACC,GACLnC,QAAQC,IAAIkC,EAAIC,MAChBpC,QAAQC,IAAI,QACZ2B,EAASO,EAAIC,KAAKC,cAGxB,CAACb,IAEHxB,QAAQC,IAAI,OAAQ0B,GAyClB,yBAAKzB,UAAU,OACb,kBAAC,EAAD,CACEc,UAAWA,EACXW,OAAQA,EACRH,KAAMA,EACND,QAASA,IAGX,wBAAIrB,UAAU,cAAcyB,EAA5B,WACA,yBAAKzB,UAAU,aAAaC,MAAO,CAAEmC,UAAW,SAC7CpB,GACCA,EAAMqB,KAAI,SAACC,GAAD,OACR,oCACE,yBACEtC,UAAU,eACVuC,IAAKD,EAAWE,KAAKC,QACrBjC,IAAI,GACJkC,IAAKJ,EAAWK,YC9EZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.29b02e87.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar(props) {\n  console.log(\"prop\", props);\n\n  const changeHandler = (e) => {\n    props.setSearch(e.target.value);\n    console.log(\"search value\", props.imageData);\n  };\n  const clickHandler = (e) => {\n    e.preventDefault();\n    console.log(\"k clicked\");\n    props.setSent(!props.sent);\n  };\n  return (\n    <div>\n      <nav\n        className=\"navbar  justify-content-between\"\n        style={{ backgroundColor: \"  #17151B\" }}\n      >\n        <p\n          className=\"navbar-brand\"\n          style={{\n            color: \"#fff\",\n            fontWeight: \"700\",\n            paddingTop: \"1rem\",\n            fontSize: \"2rem\",\n            letterSpacing: \".1rem\",\n          }}\n        >\n          <img className=\"logo-style\" alt=\"\" />\n          Grid.\n        </p>\n\n        <form className=\"form-inline\">\n          <input\n            className=\"form-control mr-sm-2\"\n            type=\"search\"\n            placeholder=\"Search\"\n            aria-label=\"Search\"\n            onChange={changeHandler}\n          />\n          <button\n            className=\"btn btn-outline-success my-2 my-sm-0\"\n            style={{ color: \"#fff\", borderColor: \"#fff\", fontWeight: \"800\" }}\n            onClick={clickHandler}\n          >\n            Search\n          </button>\n        </form>\n      </nav>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport InputComp from \"./input.js\";\nimport Navbar from \"./navbar\";\n\nfunction App() {\n  const [search, setSearch] = useState(\"travel\");\n  const [value, setValue] = useState([]);\n\n  const [loaded, setIsLoaded] = React.useState(false);\n  const [imageData, setImageData] = useState([]);\n  const [sent, setSent] = useState(false);\n\n  useEffect(\n    (item) => {\n      // e.preventDefault();\n      const access_key = \"LD3Wl2QrQPHFCUnAGXU6AWQdLSipmIgi8TZKjzOOxAI\";\n      const url = \"https://api.unsplash.com/photos/?client_id=YOUR_ACCESS_KEY\";\n      axios\n        .get(\n          `https://api.unsplash.com/search/photos/?client_id=LD3Wl2QrQPHFCUnAGXU6AWQdLSipmIgi8TZKjzOOxAI&query=${search}`\n        )\n\n        .then((res) => {\n          console.log(res.data);\n          console.log(\"call\");\n          setValue(res.data.results);\n        });\n    },\n    [sent]\n  );\n  console.log(\"stae\", search);\n  // const Modal = () => {\n  //   return (\n  //     <div>\n  //       <div className=\"modal\" tabindex=\"-1\" role=\"dialog\">\n  //         <div className=\"modal-dialog\" role=\"document\">\n  //           <div className=\"modal-content\">\n  //             <div className=\"modal-header\">\n  //               <h5 className=\"modal-title\">Modal title</h5>\n  //               <button\n  //                 type=\"button\"\n  //                 className=\"close\"\n  //                 data-dismiss=\"modal\"\n  //                 aria-label=\"Close\"\n  //               >\n  //                 <span aria-hidden=\"true\">&times;</span>\n  //               </button>\n  //             </div>\n  //             <div className=\"modal-body\">\n  //               <p>Modal body text goes here</p>\n  //             </div>\n  //             <div className=\"modal-footer\">\n  //               <button type=\"button\" className=\"btn btn-primary\">\n  //                 Save changes\n  //               </button>\n  //               <button\n  //                 type=\"button\"\n  //                 className=\"btn btn-secondary\"\n  //                 data-dismiss=\"modal\"\n  //               >\n  //                 Close\n  //               </button>\n  //             </div>\n  //           </div>\n  //         </div>\n  //       </div>\n  //     </div>\n  //   );\n  // };\n\n  return (\n    <div className=\"App\">\n      <Navbar\n        setSearch={setSearch}\n        search={search}\n        sent={sent}\n        setSent={setSent}\n      />\n      {/* <InputComp /> */}\n      <h3 className=\"app-header\">{search} photos</h3>\n      <div className=\"image-grid\" style={{ marginTop: \"30px\" }}>\n        {value &&\n          value.map((searchItem) => (\n            <>\n              <img\n                className=\"search-image\"\n                src={searchItem.urls.regular}\n                alt=\"\"\n                key={searchItem.id}\n                // onClick={Modal}\n              ></img>\n            </>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}